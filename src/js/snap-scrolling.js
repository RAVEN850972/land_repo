/**
 * SNAP SCROLLING MODULE
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–Ω–∞–ø-—Å–∫—Ä–æ–ª–ª–∏–Ω–≥ –¥–ª—è Emil Production
 * –í–µ—Ä—Å–∏—è: 1.0.0
 */

(function() {
    'use strict';
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    const config = {
        snapType: 'y mandatory',
        snapAlign: 'center', // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–π
        smoothBehavior: true,
        keyboardNavigation: true,
        touchNavigation: true,
        autoSnap: true, // –ê–≤—Ç–æ–¥–æ–≤–æ–¥–∫–∞
        snapThreshold: 0.3, // –ü–æ—Ä–æ–≥ –¥–ª—è –∞–≤—Ç–æ–¥–æ–≤–æ–¥–∫–∏ (30% —Å–µ–∫—Ü–∏–∏)
        snapDelay: 150, // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∞–≤—Ç–æ–¥–æ–≤–æ–¥–∫–æ–π (–º—Å)
        mobileBreakpoint: 768,
        observerThreshold: 0.5,
        observerMargin: '-20% 0px -20% 0px'
    };
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥—É–ª—è
    let state = {
        sections: [],
        currentIndex: 0,
        isInitialized: false,
        isMobile: false,
        isScrolling: false,
        scrollTimeout: null,
        lastScrollTime: 0,
        observer: null,
        touchStart: { y: 0, time: 0 }
    };
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     */
    function init() {
        if (state.isInitialized) {
            console.warn('Snap scrolling already initialized');
            return;
        }
        
        console.log('üéØ Initializing snap scrolling...');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
        state.sections = document.querySelectorAll('.snap-section');
        
        if (state.sections.length === 0) {
            console.warn('No snap sections found');
            return;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        checkMobileDevice();
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º CSS snap
        applyCSSSnap();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        initKeyboardNavigation();
        initTouchNavigation();
        initAutoSnapScrolling(); // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–¥–æ–≤–æ–¥–∫–∏
        initSectionObserver();
        initResizeHandler();
        
        state.isInitialized = true;
        
        // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º API
        exposeAPI();
        
        console.log(`‚úÖ Snap scrolling initialized with ${state.sections.length} sections`);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
     */
    function checkMobileDevice() {
        state.isMobile = window.innerWidth <= config.mobileBreakpoint;
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ CSS snap —Å—Ç–∏–ª–µ–π
     */
    function applyCSSSnap() {
        const html = document.documentElement;
        
        if (state.isMobile) {
            // –û—Ç–∫–ª—é—á–∞–µ–º snap –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
            html.style.scrollSnapType = 'none';
        } else {
            // –í–∫–ª—é—á–∞–µ–º snap –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ
            html.style.scrollSnapType = config.snapType;
            html.style.scrollBehavior = config.smoothBehavior ? 'smooth' : 'auto';
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ —Å–µ–∫—Ü–∏—è–º
        state.sections.forEach(section => {
            if (!state.isMobile) {
                section.style.scrollSnapAlign = config.snapAlign;
                section.style.scrollSnapStop = 'always';
            } else {
                section.style.scrollSnapAlign = 'none';
                section.style.scrollSnapStop = 'normal';
            }
        });
    }
    
    /**
     * –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–µ–∫—Ü–∏–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É
     */
    function scrollToSection(index, smooth = true) {
        if (index < 0 || index >= state.sections.length) {
            console.warn(`Invalid section index: ${index}`);
            return false;
        }
        
        const section = state.sections[index];
        const behavior = smooth ? 'smooth' : 'auto';
        
        section.scrollIntoView({
            behavior: behavior,
            block: 'center', // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Å–µ–∫—Ü–∏—é
            inline: 'nearest'
        });
        
        state.currentIndex = index;
        
        // –°–æ–±—ã—Ç–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        fireAnalyticsEvent('section_navigate', {
            section_index: index,
            section_id: section.id || `section_${index}`,
            navigation_method: 'programmatic'
        });
        
        return true;
    }
    
    /**
     * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
     */
    function initKeyboardNavigation() {
        if (!config.keyboardNavigation) return;
        
        document.addEventListener('keydown', function(e) {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–æ–∫—É—Å –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö –≤–≤–æ–¥–∞
            if (isInputFocused()) return;
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ –º–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é
            if (isMobileMenuOpen()) return;
            
            let handled = false;
            
            switch(e.key) {
                case 'ArrowDown':
                case 'PageDown':
                    e.preventDefault();
                    if (state.currentIndex < state.sections.length - 1) {
                        scrollToSection(state.currentIndex + 1);
                        fireAnalyticsEvent('keyboard_navigation', { direction: 'down' });
                    }
                    handled = true;
                    break;
                    
                case 'ArrowUp':
                case 'PageUp':
                    e.preventDefault();
                    if (state.currentIndex > 0) {
                        scrollToSection(state.currentIndex - 1);
                        fireAnalyticsEvent('keyboard_navigation', { direction: 'up' });
                    }
                    handled = true;
                    break;
                    
                case 'Home':
                    e.preventDefault();
                    scrollToSection(0);
                    fireAnalyticsEvent('keyboard_navigation', { direction: 'home' });
                    handled = true;
                    break;
                    
                case 'End':
                    e.preventDefault();
                    scrollToSection(state.sections.length - 1);
                    fireAnalyticsEvent('keyboard_navigation', { direction: 'end' });
                    handled = true;
                    break;
            }
            
            if (handled) {
                console.log(`‚å®Ô∏è Keyboard navigation: ${e.key} -> section ${state.currentIndex}`);
            }
        });
    }
    
    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–æ–≤–æ–¥–∫–∞ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
     */
    function initAutoSnapScrolling() {
        if (!config.autoSnap) return;
        
        let isUserScrolling = false;
        let scrollDirection = 0;
        let lastScrollY = window.pageYOffset;
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–æ–ª–ª–∞
        function handleScroll() {
            const currentScrollY = window.pageYOffset;
            scrollDirection = currentScrollY > lastScrollY ? 1 : -1;
            lastScrollY = currentScrollY;
            
            state.isScrolling = true;
            state.lastScrollTime = Date.now();
            
            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
            if (state.scrollTimeout) {
                clearTimeout(state.scrollTimeout);
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–¥–æ–≤–æ–¥–∫–∏
            state.scrollTimeout = setTimeout(() => {
                if (state.isScrolling) {
                    performAutoSnap(scrollDirection);
                    state.isScrolling = false;
                }
            }, config.snapDelay);
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫—Ä–æ–ª–ª–∞
        function handleScrollEnd() {
            state.isScrolling = false;
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            setTimeout(() => {
                if (!state.isScrolling) {
                    performAutoSnap(scrollDirection);
                }
            }, 50);
        }
        
        // –°–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
        window.addEventListener('scroll', handleScroll, { passive: true });
        window.addEventListener('scrollend', handleScrollEnd, { passive: true });
        
        // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ –±–µ–∑ scrollend
        let scrollEndTimer;
        window.addEventListener('scroll', function() {
            clearTimeout(scrollEndTimer);
            scrollEndTimer = setTimeout(handleScrollEnd, 150);
        }, { passive: true });
        
        console.log('üéØ Auto-snap scrolling initialized');
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–¥–æ–≤–æ–¥–∫–∏ –∫ –±–ª–∏–∂–∞–π—à–µ–π —Å–µ–∫—Ü–∏–∏
     */
    function performAutoSnap(direction = 0) {
        if (state.isMobile || isInputFocused() || isMobileMenuOpen()) return;
        
        const windowHeight = window.innerHeight;
        const scrollY = window.pageYOffset;
        const windowCenter = scrollY + windowHeight / 2;
        
        let targetSection = null;
        let targetIndex = -1;
        let minDistance = Infinity;
        
        // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é —Å–µ–∫—Ü–∏—é –∫ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞
        state.sections.forEach((section, index) => {
            const rect = section.getBoundingClientRect();
            const sectionTop = scrollY + rect.top;
            const sectionCenter = sectionTop + rect.height / 2;
            const distance = Math.abs(windowCenter - sectionCenter);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∏–¥–Ω–∞ –ª–∏ —Å–µ–∫—Ü–∏—è —Ö–æ—Ç—è –±—ã –Ω–∞ threshold%
            const visibleHeight = Math.min(scrollY + windowHeight, sectionTop + rect.height) - 
                                Math.max(scrollY, sectionTop);
            const visibilityRatio = visibleHeight / rect.height;
            
            if (visibilityRatio > config.snapThreshold && distance < minDistance) {
                minDistance = distance;
                targetSection = section;
                targetIndex = index;
            }
        });
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å–µ–∫—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∞
        if (targetIndex === -1) {
            if (direction > 0 && state.currentIndex < state.sections.length - 1) {
                targetIndex = state.currentIndex + 1;
            } else if (direction < 0 && state.currentIndex > 0) {
                targetIndex = state.currentIndex - 1;
            } else {
                targetIndex = state.currentIndex;
            }
            targetSection = state.sections[targetIndex];
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–¥–æ–≤–æ–¥–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (targetIndex !== state.currentIndex && targetSection) {
            console.log(`üß≤ Auto-snap: ${state.currentIndex} -> ${targetIndex}`);
            
            // –ü–ª–∞–≤–Ω–æ –¥–æ–≤–æ–¥–∏–º –¥–æ —Ü–µ–Ω—Ç—Ä–∞ —Å–µ–∫—Ü–∏–∏
            targetSection.scrollIntoView({
                behavior: 'smooth',
                block: 'center',
                inline: 'nearest'
            });
            
            state.currentIndex = targetIndex;
            
            // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
            fireAnalyticsEvent('auto_snap', {
                from_section: state.currentIndex,
                to_section: targetIndex,
                direction: direction > 0 ? 'down' : direction < 0 ? 'up' : 'none'
            });
        }
    }
    
    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–µ–π —Å–µ–∫—Ü–∏–∏ –∫ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞
     */
    function getClosestSectionToCenter() {
        const windowHeight = window.innerHeight;
        const scrollY = window.pageYOffset;
        const windowCenter = scrollY + windowHeight / 2;
        
        let closestSection = null;
        let closestIndex = -1;
        let minDistance = Infinity;
        
        state.sections.forEach((section, index) => {
            const rect = section.getBoundingClientRect();
            const sectionTop = scrollY + rect.top;
            const sectionCenter = sectionTop + rect.height / 2;
            const distance = Math.abs(windowCenter - sectionCenter);
            
            if (distance < minDistance) {
                minDistance = distance;
                closestSection = section;
                closestIndex = index;
            }
        });
        
        return { section: closestSection, index: closestIndex, distance: minDistance };
    }
    function initTouchNavigation() {
        if (!config.touchNavigation) return;
        
        document.addEventListener('touchstart', function(e) {
            state.touchStart.y = e.touches[0].clientY;
            state.touchStart.time = Date.now();
        }, { passive: true });
        
        document.addEventListener('touchend', function(e) {
            if (!state.touchStart.y) return;
            
            const endY = e.changedTouches[0].clientY;
            const distance = state.touchStart.y - endY;
            const time = Date.now() - state.touchStart.time;
            
            // –ë—ã—Å—Ç—Ä—ã–π —Å–≤–∞–π–ø (–º–∏–Ω–∏–º—É–º 80px –∑–∞ –º–∞–∫—Å–∏–º—É–º 300ms)
            const isQuickSwipe = Math.abs(distance) > 80 && time < 300;
            
            if (isQuickSwipe && state.isMobile) {
                if (distance > 0 && state.currentIndex < state.sections.length - 1) {
                    // –°–≤–∞–π–ø –≤–≤–µ—Ä—Ö - —Å–ª–µ–¥—É—é—â–∞—è —Å–µ–∫—Ü–∏—è
                    scrollToSection(state.currentIndex + 1);
                    fireAnalyticsEvent('touch_navigation', { direction: 'up' });
                } else if (distance < 0 && state.currentIndex > 0) {
                    // –°–≤–∞–π–ø –≤–Ω–∏–∑ - –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å–µ–∫—Ü–∏—è
                    scrollToSection(state.currentIndex - 1);
                    fireAnalyticsEvent('touch_navigation', { direction: 'down' });
                }
            }
            
            state.touchStart.y = 0;
        }, { passive: true });
    }
    
    /**
     * –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ —Å–µ–∫—Ü–∏—è–º–∏
     */
    function initSectionObserver() {
        const options = {
            threshold: [0.1, 0.3, 0.5, 0.7, 0.9], // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
            rootMargin: config.observerMargin
        };
        
        state.observer = new IntersectionObserver(function(entries) {
            let mostVisibleSection = null;
            let maxVisibility = 0;
            
            entries.forEach(entry => {
                if (entry.isIntersecting && entry.intersectionRatio > maxVisibility) {
                    maxVisibility = entry.intersectionRatio;
                    mostVisibleSection = entry.target;
                }
            });
            
            if (mostVisibleSection) {
                const newIndex = Array.from(state.sections).indexOf(mostVisibleSection);
                
                if (newIndex !== state.currentIndex && newIndex !== -1) {
                    state.currentIndex = newIndex;
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ–∫—Ü–∏–∏
                    state.sections.forEach((section, index) => {
                        section.classList.toggle('active', index === newIndex);
                    });
                    
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–º–µ–Ω–µ —Å–µ–∫—Ü–∏–∏
                    fireCustomEvent('sectionChange', {
                        index: newIndex,
                        section: mostVisibleSection,
                        sectionId: mostVisibleSection.id,
                        visibility: maxVisibility
                    });
                    
                    console.log(`üëÄ Section active: ${newIndex} (${mostVisibleSection.id}) - ${Math.round(maxVisibility * 100)}% visible`);
                }
            }
        }, options);
        
        // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –≤—Å–µ–º–∏ —Å–µ–∫—Ü–∏—è–º–∏
        state.sections.forEach(section => {
            state.observer.observe(section);
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
     */
    function initResizeHandler() {
        let resizeTimeout;
        
        window.addEventListener('resize', function() {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(() => {
                const wasMobile = state.isMobile;
                checkMobileDevice();
                
                // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                if (wasMobile !== state.isMobile) {
                    applyCSSSnap();
                    console.log(`üì± Device type changed: ${state.isMobile ? 'mobile' : 'desktop'}`);
                }
            }, 250);
        });
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ–∫—É—Å–∞ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö –≤–≤–æ–¥–∞
     */
    function isInputFocused() {
        const activeElement = document.activeElement;
        const inputTypes = ['INPUT', 'TEXTAREA', 'SELECT'];
        return inputTypes.includes(activeElement.tagName);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
     */
    function isMobileMenuOpen() {
        const mobileNav = document.getElementById('mobile-nav');
        return mobileNav && mobileNav.classList.contains('active');
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
     */
    function fireAnalyticsEvent(eventName, data = {}) {
        // Google Analytics
        if (typeof gtag === 'function') {
            gtag('event', eventName, data);
        }
        
        // Yandex Metrica
        if (typeof ym === 'function') {
            ym(window.yaCounterId, 'reachGoal', eventName, data);
        }
        
        // Custom analytics
        if (window.analytics && typeof window.analytics.track === 'function') {
            window.analytics.track(eventName, data);
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
     */
    function fireCustomEvent(eventName, detail) {
        const event = new CustomEvent(eventName, { 
            detail: detail,
            bubbles: true 
        });
        document.dispatchEvent(event);
    }
    
    /**
     * –≠–∫—Å–ø–æ—Ä—Ç API
     */
    function exposeAPI() {
        window.SnapScrolling = {
            // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
            scrollToSection: scrollToSection,
            getCurrentSection: () => state.currentIndex,
            getSectionsCount: () => state.sections.length,
            
            // –£—Ç–∏–ª–∏—Ç—ã
            scrollToNext: () => {
                if (state.currentIndex < state.sections.length - 1) {
                    return scrollToSection(state.currentIndex + 1);
                }
                return false;
            },
            
            scrollToPrev: () => {
                if (state.currentIndex > 0) {
                    return scrollToSection(state.currentIndex - 1);
                }
                return false;
            },
            
            scrollToFirst: () => scrollToSection(0),
            scrollToLast: () => scrollToSection(state.sections.length - 1),
            
            // –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∞–≤—Ç–æ–¥–æ–≤–æ–¥–∫–∏
            snapToClosest: () => {
                const closest = getClosestSectionToCenter();
                if (closest.index !== -1) {
                    scrollToSection(closest.index);
                    return true;
                }
                return false;
            },
            
            forceAutoSnap: () => performAutoSnap(0),
            
            getClosestSection: getClosestSectionToCenter,
            
            // –°–æ—Å—Ç–æ—è–Ω–∏–µ
            isMobile: () => state.isMobile,
            isInitialized: () => state.isInitialized,
            
            // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            getConfig: () => ({ ...config }),
            updateConfig: (newConfig) => {
                Object.assign(config, newConfig);
                if (state.isInitialized) {
                    applyCSSSnap();
                }
            },
            
            // –û—Ç–ª–∞–¥–∫–∞
            debug: () => ({
                state: { ...state },
                config: { ...config },
                sections: Array.from(state.sections).map((s, i) => ({
                    index: i,
                    id: s.id,
                    element: s
                }))
            })
        };
        
        console.log('üîß SnapScrolling API available at window.SnapScrolling');
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    function updateExistingNavigation() {
        // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∫–Ω–æ–ø–æ–∫
        const originalFunctions = {
            scrollToContactFormArtist: window.scrollToContactFormArtist,
            scrollToContactFormInvestor: window.scrollToContactFormInvestor,
            scrollToContactFormPartner: window.scrollToContactFormPartner
        };
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è snap-—Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞
        window.scrollToContactFormArtist = function() {
            const contactSection = document.getElementById('contacts');
            if (contactSection) {
                const index = Array.from(state.sections).indexOf(contactSection);
                if (index !== -1) {
                    scrollToSection(index);
                    // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏
                    if (originalFunctions.scrollToContactFormArtist) {
                        setTimeout(() => originalFunctions.scrollToContactFormArtist(), 1000);
                    }
                }
            }
        };
        
        window.scrollToContactFormInvestor = function() {
            const investorSection = document.getElementById('investors');
            if (investorSection) {
                const index = Array.from(state.sections).indexOf(investorSection);
                if (index !== -1) {
                    scrollToSection(index);
                    if (originalFunctions.scrollToContactFormInvestor) {
                        setTimeout(() => originalFunctions.scrollToContactFormInvestor(), 1000);
                    }
                }
            }
        };
        
        window.scrollToContactFormPartner = function() {
            const contactSection = document.getElementById('contacts');
            if (contactSection) {
                const index = Array.from(state.sections).indexOf(contactSection);
                if (index !== -1) {
                    scrollToSection(index);
                    if (originalFunctions.scrollToContactFormPartner) {
                        setTimeout(() => originalFunctions.scrollToContactFormPartner(), 1000);
                    }
                }
            }
        };
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
     */
    function initWhenReady() {
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', init);
        } else {
            // DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω
            setTimeout(init, 100);
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        window.addEventListener('load', function() {
            if (!state.isInitialized) {
                setTimeout(init, 200);
            } else {
                updateExistingNavigation();
            }
        });
    }
    
    // –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    initWhenReady();
    
})();